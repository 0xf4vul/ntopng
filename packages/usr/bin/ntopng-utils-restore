#!/bin/bash

DEFAULT_ARCHIVE="/tmp/conf.tar.gz"
ARCHIVE=""
ARCHIVE_RUNTIMEPREFS=""
ARCHIVE_SYSTEMCONFIG=""
ARCHIVE_DATADIR=""
ARCHIVE_LICENSE=""
SAVED_SUFFIX=".saved"

echo "Executing ntopng configuration restore utility"

if [ -f "$1" ]; then
    ARCHIVE="$1"
elif [ -f "${DEFAULT_ARCHIVE}" ]; then

    ARCHIVE="${DEFAULT_ARCHIVE}"
else
    echo "Usage:"
    echo "`basename $0` [/path/to/conf.tar.gz]"
    echo ""
    echo "[/path/to/conf.tar.gz]"
    echo "  The path to a compressed archive containing"
    echo "  a backup that has to be restored. The only compressed archives"
    echo "  accepted are those created from the web interface."
    echo "  When no path is specified, the default ${DEFAULT_ARCHIVE}"
    echo "  path is used."
    exit 1
fi

function check_tar_file() {
    # make sure it's a tar archive
    if ! `file $1 | grep -qc "gzip compressed data";`; then
	echo "Unrecognized file format for ${ARCHIVE}: expecting gzip compressed data"
	exit 1
    fi
}

function check_tar_contents() {
    # must contain directory /etc/ntopng
    if ! `tar tf ${ARCHIVE} /etc/ntopng/ >/dev/null 2>&1`; then
	echo "Compressed archive $1 does not contain /etc/ntopng/"
	exit 1
    fi

    # could contain a license file
    if `tar tf ${ARCHIVE} /etc/ntopng.license >/dev/null 2>&1`; then
	ARCHIVE_LICENSE="/etc/ntopng.license"
    elif `tar tf ${ARCHIVE} /etc/nedge.license >/dev/null 2>&1`; then
	ARCHIVE_LICENSE="/etc/nedge.license"
    fi

    # could contain files:
    # - runtimepref.json
    # - system.config (nedge only)
    # if those files exist they must be in the same dir
    # only one copy of the file must be present in the archive

    if [ `tar Pztf ${ARCHIVE} | grep 'runtimeprefs.json$' | wc -l` -gt "1" ]; then
	echo "Too many copies of runtimeprefs.json in compressed archive."
	exit 1
    fi

    if [ `tar Pztf ${ARCHIVE} | grep 'system.config$' | wc -l` -gt "1" ]; then
	echo "Too many copies of system.config in compressed archive."
	exit 1
    fi

    ARCHIVE_RUNTIMEPREFS="`tar Pztf ${ARCHIVE} | grep 'runtimeprefs.json$'`"
    ARCHIVE_SYSTEMCONFIG="`tar Pztf ${ARCHIVE} | grep 'system.config$'`"

    local ARCHIVE_RUNTIMEBASE=""
    local ARCHIVE_SYSTEMBASE=""

    if [ ! -z ${ARCHIVE_RUNTIMEPREFS} ]; then
	ARCHIVE_RUNTIMEBASE=`dirname ${ARCHIVE_RUNTIMEPREFS}`
	ARCHIVE_DATADIR="${ARCHIVE_RUNTIMEBASE}"
    fi
    if [ ! -z ${ARCHIVE_SYSTEMCONFIG} ]; then
	ARCHIVE_SYSTEMBASE=`dirname ${ARCHIVE_SYSTEMCONFIG}`
	ARCHIVE_DATADIR="${ARCHIVE_SYSTEMBASE}"
    fi

    # note, it's not a double set of ARCHIVE_DATADIR, indeed, in the following if
    # we exit if the ARCHIVE_DATADIR differ

    if [ ! -z ${ARCHIVE_RUNTIMEPREFS} ] && [ ! -z ${ARCHIVE_SYSTEMCONFIG} ]; then
	if [ "${ARCHIVE_RUNTIMEBASE}" != "${ARCHIVE_SYSTEMBASE}" ]; then
	    echo "Compressed archive contains files in unexpected positions:"
	    echo "${ARCHIVE_RUNTIMEPREFS}"
	    echo "${ARCHIVE_SYSTEMCONFIG}"
	    echo "Files must be in the same directory"
	    exit 1
	fi
    fi
}

function check_current_system_dirs() {
    if [ ! -d "/etc/ntopng" ]; then
	echo "Directory /etc/ntopng is missing from the system, unable to restore."
	exit 1
    fi

    # ARCHIVE_DATADIR is empty when system.config and runtimeprefs.json are not
    # going to be restored
    if [ ! -z "${ARCHIVE_DATADIR}" ] && [ ! -d "${ARCHIVE_DATADIR}" ]; then
	echo "Directory ${ARCHIVE_DATADIR} missing from the system, unable to restore."
	exit 1
    fi
}

function save_existing() {
    if [ ! -z "$1" ]; then
	if [ ! -f "$1" ] && [ ! -d "$1" ] ; then
	    return
	else
	    local DST="$1${SAVED_SUFFIX}"
	    echo "Saving $1 to to ${DST}"
	    rm -rf "${DST}"
	    cp -Rp "$1" "${DST}"
	fi
    fi
}

function save_ntopng_conf_dir() {
    # copy the whole directory
    save_existing "/etc/ntopng"
}

function save_existing_files() {
    if [ -z "${ARCHIVE_DATADIR}" ]; then
	return
    fi

    save_existing "${ARCHIVE_RUNTIMEPREFS}"
    save_existing "${ARCHIVE_SYSTEMCONFIG}"
    save_existing "${ARCHIVE_LICENSE}"
}

function restore_ntopng_conf_dir() {
    # extract /etc/ntopng from the archive to the filesystem
    # P is use to tell tar to not remove the leading slash
    # as we are only going to write /etc/ntopng and not stuff
    # around for the system

    # permissions stay untouched for the ntopng data dir
    # that must be hanlded as root (sensitive data including
    # passwords can be contained here)
    tar Pxfvz ${ARCHIVE} /etc/ntopng || exit 1
    echo "Restored folder /etc/ntopng"
}

function restore_file() {
    if [ -z "$1" ]; then
	# nothing to do
	return
    fi

    # restore the file passed as first argument

    # NOTE:
    # When extracting files, if tar discovers that the extracted file already exists,
    # it replaces the file by removing it before extracting it. If a directory cannot be removed
    # because it is nonempty, tar overwrites its metadata (ownership, permission, etc.).
    # To be more cautious and preserve the metadata of such a directory, we use the `--no-overwrite-dir' option.

    tar Pxfvz "${ARCHIVE}" "$1" --no-overwrite-dir || exit 1
    # changses the permissions of the restored file as specified in the
    # second argument
    chown "$2" "$1" || exit 1

    echo "Restored $1"
}

function restore_files() {
    if [ -z "${ARCHIVE_DATADIR}" ] || [ ! -d "${ARCHIVE_DATADIR}" ]; then
	# nothing to do, the either not existing or not a directory
	return
    fi

    # Get the ownership of the data directory
    # extracted files will be chowned to make sure they have the same
    # owner and group of the data directory
    local USER_GROUP=`ls -ld ${ARCHIVE_DATADIR} | awk '{print $3":"$4}'`
    # will be something like root:root nobody:nogroup

    if [ -z "${USER_GROUP}" ]; then
	echo "Unable to retrieve user and group of ${ARCHIVE_DATADIR}"
	exit 1
    fi

    # restore archives and we're sure it's
    # going to be in an existing directory
    restore_file "${ARCHIVE_RUNTIMEPREFS}" "${USER_GROUP}"
    restore_file "${ARCHIVE_SYSTEMCONFIG}" "${USER_GROUP}"
    restore_file "${ARCHIVE_LICENSE}" "root:root"
}

function cleanup() {
    rm -rf ${ARCHIVE}
}

# preliminary checks
check_tar_file ${ARCHIVE}
check_tar_contents ${ARCHIVE}
check_current_system_dirs

# pre-restore saves of existing files and dirs
save_ntopng_conf_dir
save_existing_files

# actual restore
restore_ntopng_conf_dir
restore_files

#cleanup files
cleanup

exit 0
