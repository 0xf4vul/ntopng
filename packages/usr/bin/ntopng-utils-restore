#!/bin/bash

DEFAULT_ARCHIVE="/tmp/conf.tar.gz"
ARCHIVE=""
ARCHIVE_RUNTIMEPREFS=""
ARCHIVE_SYSTEMCONFIG=""
ARCHIVE_DATADIR=""
ARCHIVE_LICENSE=""
SAVED_SUFFIX=".ntopngsaved"
STAGING_DIR=""

echo "Executing ntopng configuration restore utility"

if [ -f "$@" ]; then
    ARCHIVE="$@"
elif [ -f "${DEFAULT_ARCHIVE}" ]; then

    ARCHIVE="${DEFAULT_ARCHIVE}"
else
    echo "Usage:"
    echo "`basename $0` [/path/to/conf.tar.gz]"
    echo ""
    echo "[/path/to/conf.tar.gz]"
    echo "  The path to a compressed archive containing"
    echo "  a backup that has to be restored. The only compressed archives"
    echo "  accepted are those created from the web interface."
    echo "  When no path is specified, the default ${DEFAULT_ARCHIVE}"
    echo "  path is used."
    exit 1
fi

function check_tar_file() {
    # make sure it's a tar archive
    if ! `file "${ARCHIVE}" | grep -qc "gzip compressed data";`; then
	echo "Unrecognized file format for ${ARCHIVE}: expecting gzip compressed data"
	exit 1
    fi
}

function check_tar_contents() {
    # must contain directory /etc/ntopng
    if ! `tar tf "${ARCHIVE}" /etc/ntopng/ >/dev/null 2>&1`; then
	echo "Compressed archive $1 does not contain /etc/ntopng/"
	exit 1
    fi

    # could contain a license file
    if `tar tf "${ARCHIVE}" /etc/ntopng.license >/dev/null 2>&1`; then
	ARCHIVE_LICENSE="/etc/ntopng.license"
    elif `tar tf "${ARCHIVE}" /etc/nedge.license >/dev/null 2>&1`; then
	ARCHIVE_LICENSE="/etc/nedge.license"
    fi

    # could contain files:
    # - runtimepref.json
    # - system.config (nedge only)
    # if those files exist they must be in the same dir
    # only one copy of the file must be present in the archive

    if [ `tar Pztf "${ARCHIVE}" | grep 'runtimeprefs.json$' | wc -l` -gt "1" ]; then
	echo "Too many copies of runtimeprefs.json in compressed archive."
	exit 1
    fi

    if [ `tar Pztf "${ARCHIVE}" | grep 'system.config$' | wc -l` -gt "1" ]; then
	echo "Too many copies of system.config in compressed archive."
	exit 1
    fi

    ARCHIVE_RUNTIMEPREFS="`tar Pztf "${ARCHIVE}" | grep 'runtimeprefs.json$'`"
    ARCHIVE_SYSTEMCONFIG="`tar Pztf "${ARCHIVE}" | grep 'system.config$'`"

    local ARCHIVE_RUNTIMEBASE=""
    local ARCHIVE_SYSTEMBASE=""

    if [ ! -z ${ARCHIVE_RUNTIMEPREFS} ]; then
	ARCHIVE_RUNTIMEBASE=`dirname "${ARCHIVE_RUNTIMEPREFS}"`
	ARCHIVE_DATADIR="${ARCHIVE_RUNTIMEBASE}"
    fi

    if [ ! -z ${ARCHIVE_SYSTEMCONFIG} ]; then
	ARCHIVE_SYSTEMBASE=`dirname "${ARCHIVE_SYSTEMCONFIG}"`
	ARCHIVE_DATADIR="${ARCHIVE_SYSTEMBASE}"
    fi

    # note, it's not a double set of ARCHIVE_DATADIR, indeed, in the following if
    # we exit if the ARCHIVE_DATADIR differ

    if [ ! -z ${ARCHIVE_RUNTIMEPREFS} ] && [ ! -z ${ARCHIVE_SYSTEMCONFIG} ]; then
	if [ "${ARCHIVE_RUNTIMEBASE}" != "${ARCHIVE_SYSTEMBASE}" ]; then
	    echo "Compressed archive contains files in unexpected positions:"
	    echo "${ARCHIVE_RUNTIMEPREFS}"
	    echo "${ARCHIVE_SYSTEMCONFIG}"
	    echo "Files must be in the same directory"
	    exit 1
	fi
    fi
}

function extract_tar_file() {
    # the temp directory used, within $DIR
    # omit the -p parameter to create a temporal directory in the default location
    STAGING_DIR=`mktemp -d`

    # check if tmp dir was created
    if [[ ! "$STAGING_DIR" || ! -d "$STAGING_DIR" ]]; then
	echo "Could not create temp directory"
	exit 1
    fi

    echo "Extracting compressed archive contents to ${STAGING_DIR}"
    tar xfvz "${ARCHIVE}" -C "${STAGING_DIR}" || exit 1

    # Throw away any possible executable file from the staging area
    # executables include binaries but also shell scripts
    find "${STAGING_DIR}" -executable -type f  -exec rm -rf {} \;

    # Throw away backup files
    find "${STAGING_DIR}" -type f -name "*~" -exec rm -rf {} \;

    # Throw away empty files
    find "${STAGING_DIR}" -type f -size 0 -exec rm -rf {} \;

    # Throw away everything else BUT pure ASCII files
    find "${STAGING_DIR}" -type f -name '*.*' -print0 |
    while IFS= read -r -d '' FL; do
	if ! `file "${FL}" | grep -qc "ASCII text";`; then
	    rm -rf "${FL}"
	    echo "Non-ASCII file ""${FL}"" will not be restored"
	fi
    done
}

function check_current_system_dirs() {
    if [ ! -d "/etc/ntopng" ]; then
	echo "Directory /etc/ntopng is missing from the system, unable to restore."
	exit 1
    fi

    # ARCHIVE_DATADIR is empty when system.config and runtimeprefs.json are not
    # going to be restored
    if [ ! -z "${ARCHIVE_DATADIR}" ] && [ ! -d "${ARCHIVE_DATADIR}" ]; then
	echo "Directory ${ARCHIVE_DATADIR} missing from the system, unable to restore."
	exit 1
    fi
}

function restore_and_save_file() {
    local SRC="$1"  # full path to the source file
    local DST_DIR="$2" # destination directory
    local OWNERSHIP="$3" # ownership to execute chown

    if [ ! -z "${SRC}" ] && [ -f "${SRC}" ] && [ ! -z "${DST_DIR}" ] && [ -d "${DST_DIR}" ]; then
	local SRC_BASENAME=`basename "${SRC}"`
	local DST="${DST_DIR}/${SRC_BASENAME}"

	if [ -f "${DST}" ]; then
	    # make a backup copy of the file before overwriting it
	    local SAV="${DST}${SAVED_SUFFIX}"

	    rm -rf "${SAV}"
	    cp -Rp "${DST}" "${SAV}"
	    echo "File ""${DST}"" saved to ""${SAV}"
	fi

	# put the recovered file in place
	cp -Rp "${SRC}" "${DST}"
	echo "File ""${DST}"" restored"

	# possibly change the ownership
	if [ ! -z "${OWNERSHIP}" ]; then
	    chown "${OWNERSHIP}" "${DST}"
	    echo "File ""${DST}"" permissions set to ""${OWNERSHIP}"
	fi
    fi
}

function restore_files() {
    # restore /etc/ntopng files
    find "${STAGING_DIR}/etc/ntopng"  -maxdepth 1 -type f -name '*.*' -print0 |
    while IFS= read -r -d '' FL; do
	restore_and_save_file "${FL}" "/etc/ntopng"
    done

    restore_and_save_file "${STAGING_DIR}/${ARCHIVE_LICENSE}" "/etc" "root:root"

    if [ -z "${ARCHIVE_DATADIR}" ] || [ ! -d "${ARCHIVE_DATADIR}" ]; then
	# nothing to do, the either not existing or not a directory
	return
    fi

    # Get the ownership of the data directory
    # extracted files will be chowned to make sure they have the same
    # owner and group of the data directory
    local USER_GROUP=`ls -ld ${ARCHIVE_DATADIR} | awk '{print $3":"$4}'`
    # will be something like root:root nobody:nogroup

    if [ -z "${USER_GROUP}" ]; then
	echo "Unable to retrieve user and group of ${ARCHIVE_DATADIR}"
	exit 1
    fi

    # restore archives and we're sure it's
    # going to be in an existing directory
    restore_and_save_file "${STAGING_DIR}/${ARCHIVE_RUNTIMEPREFS}" "${ARCHIVE_DATADIR}" "${USER_GROUP}"
    restore_and_save_file "${STAGING_DIR}/${ARCHIVE_SYSTEMCONFIG}" "${ARCHIVE_DATADIR}" "${USER_GROUP}"
}

function cleanup() {
    rm -rf "${ARCHIVE}"
    rm -rf "${STAGING_DIR}"
}

trap cleanup EXIT

# preliminary checks
check_tar_file
check_tar_contents
extract_tar_file
check_current_system_dirs

# actual restore
restore_files

#cleanup files
cleanup

exit 0
