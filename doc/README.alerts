Alert Basics
------------

Lua scripts can generate ntopng alerts, which are then shown into the ntopng
gui.

An alert on ntopng has some mandatory attributes:

  - *type*: defines the type of the alert, for example "threashold_cross", "new_device"

  - *entity*: defines the type of the entity which this alert is inherent to, e.g. "host"
    indentifies the alerts for the hosts, "influx_db" the alerts for InfluxDB

  - *severity*: defines the alert severity, "info", "warning" or "error"

It also has some optional attributes:

  - *periodicity*: if set, it specify which is the expected alert recheck
    periodicity, e.g. if set to "5mins", it means that the alert "emit" method
    is expected to be called every 5 minutes. Supported values
    are "min", "5mins", "hour", "day"

  - *subtype*: when multiple alerts with the same type existing, it is possible
    to specify a subtype. For example, threashold cross alerts for bytes have
    type="threashold_cross" and subtype="min_bytes"

  - *formatter*: a function that will be used to format the alert message.
     The function will receive two parameters (msg, alert_record). msg contains
     the messagge of the alert (usually a parsed json), whereas alert_record
     contains the fields of the alerts as stored into the database.

Currenlty ntopng only supports built-in types and entity, which are defined in
https://github.com/ntop/ntopng/blob/dev/scripts/lua/modules/alert_consts.lua .

Alerts with periodicity 0 (default) are considered single events and are not
shown as "engaged". Engaged alerts are released after the alert is not updated
with "emit" for 2*periodicity seconds.

Generate an Alert
-----------------

Here is how to generate an alert:

```
local alert = require("alerts_api")

# Instantiate an alert with the attributes above
local device_connection_alert = alerts:newAlert({
  entity = "mac",
  type = "device_connection",
  severity = "info",
})

# Generate the alert, spefying which is the alert entity value and the message
device_connection_alert:emit("00:11:22:33:44:55",
  "The device 00:11:22:33:44:55 has connected to the network")
```

The alert message can also be bassed as a table, for example:

```
{
  mac = "00:11:22:33:44:55"
}
```

as long as the `formatter` attribute is specified during alert creation.

Custom Alert Endpoint
---------------------

Alert endpoints are lua script executed whenever an alert event occurs. An example
of alert endpoint is the email export endpoint, which sends email with alert information.

Users can define a custom alert endpoint to be called on alert events. The endpoint
could trigger, for example, an external bash script with custom logic.

The custom alert endpoint can be enabled as follows:

  1. Run `cp /usr/share/ntopng/scripts/lua/modules/alert_endpoints/{sample.lua,custom.lua}`
  2. Enable "Alerts to Third-Party Endpoints" from the "Alert Endpoints" settings
  3. Run `redis-cli set ntopng.prefs.alerts.custom_notifications_enabled 1`
  4. Restart ntopng

The file `/usr/share/ntopng/scripts/lua/modules/alert_endpoints/custom.lua` can then be
modified with custom logic.

Threshold Cross Alerts
----------------------

If the alert is a threshold_cross alert on an a new metric, the process is pretty simple.
For example, in order to get an alert when the total youtube traffic crosses a specified threshold:

- Extend `alert_consts.alert_functions_info`, `alert_consts.alarmable_metrics` end
  `alert_consts.alert_functions_description` by adding a new metric `youtube`.
- In `alert_utils.lua`, create the following function:
  ```
  function youtube(old, new, interval)
    return proto_bytes(old, new, "Youtube")
  end
  ```

The new metric should be now available into the ntopng gui, where it will be possible
to set the threshold on an host/network/interface and select to be checked every
minute/5 minutes/hour/day.

External Programs
-----------------

It is possible to easily generate *stored alerts* from external programs, integrating
them with the ntopng alerts framework.
This can be accomplished by putting a valid JSON into the redis queue
`ntopng.alert_process_queue`. Here is an example of how to do this from a bash
script:

```
redis-cli "RPUSH" "ntopng.alert_process_queue" "{ \"ifid\": 0, \"entity_type\": 5, \"entity_value\": \"4a:00:06:a0:7c:51\", \"type\": 17, \"severity\": 1, \"message\": \"IP 1.2.3.4 changed association from <a href=\\\"\\/lua\\/mac_details.lua?host=4a:00:06:a0:7c:50\\\">4a:00:06:a0:7c:50<\\/a> to <a href=\\\"\\/lua\\/mac_details.lua?host=4a:00:06:a0:7c:51\\\">4a:00:06:a0:7c:51<\\/a>\", \"tstamp\": 1523616620, \"action\": \"store\" }"
```

and here is the formatted JSON:

```
{
   "ifid":  0,
   "entity_type":  5,
   "entity_value":  "4A:00:06:A0:7C:51",
   "type":  17,
   "severity":  1,
   "message":  "IP 1.2.3.4 changed association from <a href="/lua/mac_details.lua?host=4a:00:06:a0:7c:50">4a:00:06:a0:7c:50</a> to <a href="/lua/mac_details.lua?host=4a:00:06:a0:7c:51">4a:00:06:a0:7c:51</a>",
   "tstamp":  1523616620,
   "action":  "store"
}
```

The format of the JSON message is very similar to the format described above. Here numeric
fields are used in place of the string representation, see `alert_consts` for mappings
between string and numeric representation.
